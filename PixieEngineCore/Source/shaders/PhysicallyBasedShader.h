#pragma once

const char* const PBR_VERTEX_SHADER_SOURCE =
"#version 330 core\n"
"out vec2 fTexCoords;\n"
"out vec3 fWorldPos;\n"
"out vec3 fNormal;\n"
""
"layout(location = 0) in vec3 pos;\n"
"layout(location = 1) in vec3 norm;\n"
"layout(location = 2) in vec2 uv;\n"
"layout(location = 3) in ivec4 boneIDs;\n"
"layout(location = 4) in vec4 weights;\n"
""
"uniform mat4 mModel;\n"
"uniform mat4 mView;\n"
"uniform mat4 mProjection;\n"
""
"const int MAX_BONES = 100;\n"
"const int MAX_BONE_INFLUENCE = 4;\n"
"uniform mat4 finalBonesMatrices[MAX_BONES];\n"
""
"void main()\n"
"{\n"
"    mat4 BoneTransform = finalBonesMatrices[boneIDs[0]] * weights[0];\n"
"    BoneTransform += finalBonesMatrices[boneIDs[1]] * weights[1];\n"
"    BoneTransform += finalBonesMatrices[boneIDs[2]] * weights[2];\n"
"    BoneTransform += finalBonesMatrices[boneIDs[3]] * weights[3];\n"
""
"    vec4 PosL = BoneTransform * vec4(pos, 1.0);\n"
"    gl_Position = mProjection * mView * PosL;\n"
"    vec4 totalPosition = vec4(0.0f);\n"
""
"    for (int i = 0; i < MAX_BONE_INFLUENCE; i++) {\n"
"        if (boneIDs[i] == -1)\n"
"            continue;\n"
"        if (boneIDs[i] >= MAX_BONES) {\n"
"            totalPosition = vec4(pos, 1.0f);\n"
"            break;\n"
"        }\n"
"        vec4 localPosition = finalBonesMatrices[boneIDs[i]] * vec4(pos, 1.0f);\n"
"        totalPosition += localPosition * weights[i];\n"
"        vec3 localNormal = mat3(finalBonesMatrices[boneIDs[i]]) * norm;\n"
"    }\n"
""
"    gl_Position = mProjection * mView * mModel * vec4(pos, 1.0);\n"
"	 fTexCoords = uv;\n"
"	 fWorldPos = (mModel * vec4(pos, 1.0)).xyz;\n"
"    fNormal = mat3(transpose(inverse(mModel))) * norm;\n"
"}\n";

const char* const PBR_FRAGMENT_SHADER_SOURCE =
"#version 330 core\n"
"out vec4 FragColor;\n"
""
"const int MAX_LIGHTS = 4;\n"
"const float PI = 3.14159265359;\n"
""
"in vec2 fTexCoords;\n"
"in vec3 fWorldPos;\n"
"in vec3 fNormal;\n"
""
"uniform vec3 cameraPos;\n"
""
"uniform vec3 albedo;\n"
"uniform float metallic;\n"
"uniform float roughness;\n"
"uniform float ambientOcclusion;\n"
""
"uniform vec3 lightPositions[4];\n"
"uniform vec3 lightColors[4];\n"
""
"vec3 fresnelSchlick(float cosTheta, vec3 F0)\n"
"{\n"
"    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n"
"}\n"
""
"float DistributionGGX(vec3 N, vec3 H, float roughness)\n"
"{\n"
"    float a = roughness * roughness;\n"
"    float a2 = a * a;\n"
"    float NdotH = max(dot(N, H), 0.0);\n"
"    float NdotH2 = NdotH * NdotH;\n"
""
"    float num = a2;\n"
"    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n"
"    denom = PI * denom * denom;\n"
""
"    return num / denom;\n"
"}\n"
""
"float GeometrySchlickGGX(float NdotV, float roughness)\n"
"{\n"
"    float r = (roughness + 1.0);\n"
"    float k = (r * r) / 8.0;\n"
""
"    float num = NdotV;\n"
"    float denom = NdotV * (1.0 - k) + k;\n"
""
"    return num / denom;\n"
"}\n"
""
"float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n"
"{\n"
"    float NdotV = max(dot(N, V), 0.0);\n"
"    float NdotL = max(dot(N, L), 0.0);\n"
"    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n"
"    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n"
"    return ggx1 * ggx2;\n"
"}\n"
""
"void main()\n"
"{\n"
"	vec3 N = normalize(fNormal);\n"
"	vec3 V = normalize(cameraPos - fWorldPos);\n"
""
"	vec3 Lo = vec3(0.0);\n"
"	for(int i = 0; i < MAX_LIGHTS; i++)\n"
"	{\n"
"		vec3 L = normalize(lightPositions[i] - fWorldPos);\n"
"		vec3 H = normalize(V + L);\n"
""
"		float distance = length(lightPositions[i] - fWorldPos);\n"
"		float attenuation = 1.0 / (distance * distance);\n"
"		vec3 radiance = lightColors[i] * attenuation;\n"
""
"		vec3 F0 = vec3(0.04);\n"
"		F0 = mix(F0, albedo, metallic);\n"
"		vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);\n"
""
"		float NDF = DistributionGGX(N, H, roughness);\n"
"		float G = GeometrySmith(N, V, L, roughness);\n"
""
"		vec3 numerator = NDF * G * F;\n"
"		float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;\n"
"		vec3 specular = numerator / denominator;\n"
""
"		vec3 kS = F;\n"
"		vec3 kD = vec3(1.0) - kS;\n"
"		kD *= 1.0 - metallic;\n"
""
"		float NdotL = max(dot(N, L), 0.0);\n"
"		Lo += (kD * albedo / PI + specular) * radiance * NdotL;\n"
"	}\n"
""
"	vec3 ambient = vec3(0.03) * albedo * ambientOcclusion;\n"
"	vec3 color = ambient + Lo;\n"
""
"	color = color / (color + vec3(1.0));\n"
"	color = pow(color, vec3(1.0 / 2.2));\n"
""
"	FragColor = vec4(color, 1.0);\n"
"}\n";